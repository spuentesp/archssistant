const Groq = require('groq-sdk');

/**
 * Explica por qu√© una arquitectura es adecuada usando fuentes autorizadas.
 * Si la explicaci√≥n es insuficiente, intenta con una arquitectura secundaria (fallback).
 * @param {string} apiKey - Clave API.
 * @param {string} architecture - Arquitectura recomendada principal.
 * @param {string} fallbackArch - Segunda mejor opci√≥n.
 * @param {object} params - Par√°metros t√©cnicos detectados.
 * @returns {Promise<string>} - Explicaci√≥n en espa√±ol, estructurada.
 */
async function explainArchitecture(architecture, fallbackArch, params) {
  const paramSummary = JSON.stringify(params, null, 2);

  const systemPrompt = `
Eres un experto en arquitectura de software. Siempre debes responder en espa√±ol, sin incluir otros libros, autores ni temas ajenos a arquitectura de software.

Tu tarea es recomendar una arquitectura adecuada bas√°ndote en los siguientes par√°metros t√©cnicos:

${paramSummary}

Debes justificar por qu√© la arquitectura "${architecture}" es una buena opci√≥n. 
Si no encuentras respaldo directo en los libros, puedes usar principios generales descritos en ellos: escalabilidad, acoplamiento, cohesi√≥n, mantenibilidad, etc.

Usa exclusivamente los siguientes libros:

1. "Fundamentals of Software Architecture"  
   Autores: Mark Richards, Neal Ford  
   Editorial: O'Reilly Media, 2020  
   ISBN: 978-1-492-04345-4

2. "Software Architecture: The Hard Parts"  
   Autores: Neal Ford, Mark Richards, Pramod Sadalage, Zhamak Dehghani  
   Editorial: O'Reilly Media, 2022  
   ISBN: 978-1-492-08689-5

Tu respuesta debe tener esta estructura:
- ‚úÖ Arquitectura sugerida: {nombre}
- üìå Par√°metros relevantes: {lista de par√°metros evaluados}
- ‚ûï Ventajas relevantes seg√∫n los libros
- ‚ûñ Posibles limitaciones o desventajas
- üìö Justificaci√≥n t√©cnica
- üí¨ Conclusi√≥n final


tu respuesta y explicacion debe estar siempre en idioma espa√±ol. Puedes incluir ejemplos o analog√≠as si son relevantes. Puedes citar otros libros de arquitectura de software siempre y cuando tengas la fuente, pagina, ISBN y autores. debes publicar esa informacion y advertir que viene de fuera de los otros parametros.
`;

  const userPrompt = `¬øPor qu√© "${architecture}" es adecuada para estos par√°metros? Si no tienes suficiente respaldo, sugiere una mejor opci√≥n.`

  try {
    const client = new Groq({ apiKey: process.env.GROQ_API_KEY });
    const completion = await client.chat.completions.create({
      model: 'meta-llama/llama-guard-4-12b',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      response_format: { type: 'json_object' }
    });
    const content = completion.choices?.[0]?.message?.content?.trim();

    if (content && content.length > 100 && !/no (hay|tengo) (suficiente|informaci√≥n)/i.test(content)) {
      console.log(`[explainer] Explicaci√≥n recibida (main): ${content.slice(0, 100)}...`);
      return content;
    }

    console.warn('[explainer] Primera arquitectura no fue √∫til. Intentando fallback...');
    return await explainFallback(apiKey, fallbackArch, params);

  } catch (error) {
    console.error('[explainer] Error al solicitar explicaci√≥n:', error);
    return '‚ö†Ô∏è Error al generar explicaci√≥n desde LLM.';
  }
}

async function explainFallback(apiKey, fallbackArch, params) {
  const paramSummary = JSON.stringify(params, null, 2);

  const systemPrompt = `
Eres un experto en arquitectura de software. Siempre responde en espa√±ol y usa √∫nicamente los libros indicados.

Tu tarea es recomendar una arquitectura adecuada para los siguientes par√°metros:

${paramSummary}

Justifica por qu√© "${fallbackArch}" podr√≠a ser una opci√≥n m√°s apropiada si la primera no fue v√°lida. Ap√≥yate en principios generales como acoplamiento, escalabilidad, simplicidad, separaci√≥n de preocupaciones, etc.

Usa solo:

- "Fundamentals of Software Architecture"
- "Software Architecture: The Hard Parts"
`;

  const userPrompt = `Justifica el uso de la arquitectura "${fallbackArch}" en lugar de otra que no tuvo suficiente respaldo.`

  try {
    const client = new Groq({ apiKey: process.env.GROQ_API_KEY });
    const completion = await client.chat.completions.create({
      model: 'llama-3.1-8b-instant',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      response_format: { type: 'json_object' }
    });
    const content = completion.choices?.[0]?.message?.content?.trim();

    if (content && content.length > 100) {
      console.log(`[explainer] Explicaci√≥n recibida (fallback): ${content.slice(0, 100)}...`);
      return `‚ÑπÔ∏è Respuesta alternativa:\n\n${content}`;
    }

    return '‚ö†Ô∏è No se pudo generar una explicaci√≥n √∫til ni con la arquitectura secundaria.';

  } catch (error) {
    console.error('[explainer] Error en fallback:', error);
    return '‚ö†Ô∏è Error en la explicaci√≥n fallback.';
  }
}

async function generateParameterQuestion(missingParams, history, apiKey, aiserver) {
    const groq = new Groq({ apiKey });

    const systemPrompt = `
Eres un asistente de arquitectura de software amigable y conversacional. Tu objetivo es ayudar al usuario a definir los par√°metros necesarios para una recomendaci√≥n de arquitectura.
NO des una recomendaci√≥n de arquitectura todav√≠a. Tu √∫nica tarea es hacer preguntas para aclarar los par√°metros que faltan.
Basado en el historial de la conversaci√≥n y los par√°metros que faltan, formula una pregunta natural y amigable para obtener la siguiente pieza de informaci√≥n.
Solo pregunta por UN par√°metro a la vez para no abrumar al usuario.

Par√°metros que faltan: ${missingParams.join(', ')}
Historial de la conversaci√≥n:
${history.map(h => `${h.role}: ${h.content}`).join('\n')}
`;

    const userPrompt = "Formula la siguiente pregunta que debo hacerle al usuario.";

    try {
        const completion = await groq.chat.completions.create({
            messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt },
            ],
            model: "llama3-8b-8192",
        });

        const question = completion.choices[0]?.message?.content.trim();
        return question || "¬øPodr√≠as darme m√°s detalles sobre tu proyecto?";

    } catch (error) {
        console.error('[explainer] Error al generar la pregunta sobre par√°metros:', error);
        return 'Tuve un problema al generar la siguiente pregunta. ¬øPodemos intentarlo de nuevo?';
    }
}

module.exports = {
    explainArchitecture,
    generateParameterQuestion
};
